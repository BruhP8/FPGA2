-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nerons is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Layer2_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Layer2_Neurons_CPU_ce0 : OUT STD_LOGIC;
    Layer2_Neurons_CPU_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Layer2_Neurons_CPU_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Layer2_Neurons_CPU_ce1 : OUT STD_LOGIC;
    Layer2_Neurons_CPU_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Layer5_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Layer5_Neurons_CPU_ce0 : OUT STD_LOGIC;
    Layer5_Neurons_CPU_we0 : OUT STD_LOGIC;
    Layer5_Neurons_CPU_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of nerons is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "nerons,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.514000,HLS_SYN_LAT=2801696,HLS_SYN_TPT=none,HLS_SYN_MEM=193,HLS_SYN_DSP=106,HLS_SYN_FF=27687,HLS_SYN_LUT=35468,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_3FE55555571F7693 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100101010101010101010101010111000111110111011010010011";
    constant ap_const_lv64_3FFB74538EF34D6A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111011011101000101001110001110111100110100110101101010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_65 : STD_LOGIC_VECTOR (9 downto 0) := "0001100101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Layer4_Weights_CPU_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Layer4_Weights_CPU_ce0 : STD_LOGIC;
    signal Layer4_Weights_CPU_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_217 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln57_fu_223_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln57_reg_283 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_235_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_291 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln57_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_fu_252_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_309 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln59_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Layer4_Weights_CPU_l_reg_324 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Layer4_Neurons_CPU_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Layer4_Neurons_CPU_l_reg_329 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_i_reg_334 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_344 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_generic_tanh_double_s_fu_187_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_349 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_generic_tanh_double_s_fu_187_ap_ready : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_187_ap_done : STD_LOGIC;
    signal Layer3_Neurons_CPU_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Layer3_Neurons_CPU_ce0 : STD_LOGIC;
    signal Layer3_Neurons_CPU_we0 : STD_LOGIC;
    signal Layer3_Neurons_CPU_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Layer4_Neurons_CPU_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal Layer4_Neurons_CPU_ce0 : STD_LOGIC;
    signal Layer4_Neurons_CPU_we0 : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_ap_start : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_ap_done : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_ap_idle : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_ap_ready : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_ce1 : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_we0 : STD_LOGIC;
    signal grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_calculateLayer4_fu_173_ap_start : STD_LOGIC;
    signal grp_calculateLayer4_fu_173_ap_done : STD_LOGIC;
    signal grp_calculateLayer4_fu_173_ap_idle : STD_LOGIC;
    signal grp_calculateLayer4_fu_173_ap_ready : STD_LOGIC;
    signal grp_calculateLayer4_fu_173_Layer3_Neurons_CPU_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_calculateLayer4_fu_173_Layer3_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_we0 : STD_LOGIC;
    signal grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_generic_tanh_double_s_fu_187_ap_start : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_187_ap_idle : STD_LOGIC;
    signal i_0_i_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal phi_mul_reg_124 : STD_LOGIC_VECTOR (9 downto 0);
    signal somme_0_i_reg_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_0_i_reg_146 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculateLayer3_fu_157_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_calculateLayer4_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_generic_tanh_double_s_fu_187_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln58_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_1_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln60_2_fu_258_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln60_1_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component calculateLayer3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Layer2_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Layer2_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer2_Neurons_CPU_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Layer2_Neurons_CPU_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Layer2_Neurons_CPU_ce1 : OUT STD_LOGIC;
        Layer2_Neurons_CPU_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        Layer3_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        Layer3_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer3_Neurons_CPU_we0 : OUT STD_LOGIC;
        Layer3_Neurons_CPU_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component calculateLayer4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Layer3_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        Layer3_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer3_Neurons_CPU_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Layer4_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        Layer4_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer4_Neurons_CPU_we0 : OUT STD_LOGIC;
        Layer4_Neurons_CPU_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component generic_tanh_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nerons_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nerons_hadd_16ns_16ns_16_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nerons_hmul_16ns_16ns_16_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nerons_hptodp_16ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component nerons_Layer4_Weights_CPU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nerons_Layer3_Neurons_CPU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component nerons_Layer4_Neurons_CPU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    Layer4_Weights_CPU_U : component nerons_Layer4_Weights_CPU
    generic map (
        DataWidth => 16,
        AddressRange => 1010,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Layer4_Weights_CPU_address0,
        ce0 => Layer4_Weights_CPU_ce0,
        q0 => Layer4_Weights_CPU_q0);

    Layer3_Neurons_CPU_U : component nerons_Layer3_Neurons_CPU
    generic map (
        DataWidth => 16,
        AddressRange => 1250,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Layer3_Neurons_CPU_address0,
        ce0 => Layer3_Neurons_CPU_ce0,
        we0 => Layer3_Neurons_CPU_we0,
        d0 => grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_d0,
        q0 => Layer3_Neurons_CPU_q0);

    Layer4_Neurons_CPU_U : component nerons_Layer4_Neurons_CPU
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Layer4_Neurons_CPU_address0,
        ce0 => Layer4_Neurons_CPU_ce0,
        we0 => Layer4_Neurons_CPU_we0,
        d0 => grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_d0,
        q0 => Layer4_Neurons_CPU_q0);

    grp_calculateLayer3_fu_157 : component calculateLayer3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_calculateLayer3_fu_157_ap_start,
        ap_done => grp_calculateLayer3_fu_157_ap_done,
        ap_idle => grp_calculateLayer3_fu_157_ap_idle,
        ap_ready => grp_calculateLayer3_fu_157_ap_ready,
        Layer2_Neurons_CPU_address0 => grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_address0,
        Layer2_Neurons_CPU_ce0 => grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_ce0,
        Layer2_Neurons_CPU_q0 => Layer2_Neurons_CPU_q0,
        Layer2_Neurons_CPU_address1 => grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_address1,
        Layer2_Neurons_CPU_ce1 => grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_ce1,
        Layer2_Neurons_CPU_q1 => Layer2_Neurons_CPU_q1,
        Layer3_Neurons_CPU_address0 => grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_address0,
        Layer3_Neurons_CPU_ce0 => grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_ce0,
        Layer3_Neurons_CPU_we0 => grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_we0,
        Layer3_Neurons_CPU_d0 => grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_d0);

    grp_calculateLayer4_fu_173 : component calculateLayer4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_calculateLayer4_fu_173_ap_start,
        ap_done => grp_calculateLayer4_fu_173_ap_done,
        ap_idle => grp_calculateLayer4_fu_173_ap_idle,
        ap_ready => grp_calculateLayer4_fu_173_ap_ready,
        Layer3_Neurons_CPU_address0 => grp_calculateLayer4_fu_173_Layer3_Neurons_CPU_address0,
        Layer3_Neurons_CPU_ce0 => grp_calculateLayer4_fu_173_Layer3_Neurons_CPU_ce0,
        Layer3_Neurons_CPU_q0 => Layer3_Neurons_CPU_q0,
        Layer4_Neurons_CPU_address0 => grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_address0,
        Layer4_Neurons_CPU_ce0 => grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_ce0,
        Layer4_Neurons_CPU_we0 => grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_we0,
        Layer4_Neurons_CPU_d0 => grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_d0);

    grp_generic_tanh_double_s_fu_187 : component generic_tanh_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_tanh_double_s_fu_187_ap_start,
        ap_done => grp_generic_tanh_double_s_fu_187_ap_done,
        ap_idle => grp_generic_tanh_double_s_fu_187_ap_idle,
        ap_ready => grp_generic_tanh_double_s_fu_187_ap_ready,
        t_in => reg_217,
        ap_return => grp_generic_tanh_double_s_fu_187_ap_return);

    nerons_dmul_64ns_64ns_64_6_max_dsp_1_U46 : component nerons_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    nerons_hadd_16ns_16ns_16_5_full_dsp_1_U47 : component nerons_hadd_16ns_16ns_16_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => somme_0_i_reg_136,
        din1 => tmp_3_i_reg_334,
        ce => ap_const_logic_1,
        dout => grp_fu_204_p2);

    nerons_hmul_16ns_16ns_16_4_max_dsp_1_U48 : component nerons_hmul_16ns_16ns_16_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Layer4_Weights_CPU_l_reg_324,
        din1 => Layer4_Neurons_CPU_l_reg_329,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    nerons_hptodp_16ns_64_2_1_U49 : component nerons_hptodp_16ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => somme_0_i_reg_136,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_calculateLayer3_fu_157_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_calculateLayer3_fu_157_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_calculateLayer3_fu_157_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculateLayer3_fu_157_ap_ready = ap_const_logic_1)) then 
                    grp_calculateLayer3_fu_157_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_calculateLayer4_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_calculateLayer4_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_calculateLayer4_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculateLayer4_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_calculateLayer4_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_tanh_double_s_fu_187_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_tanh_double_s_fu_187_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_generic_tanh_double_s_fu_187_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_tanh_double_s_fu_187_ap_ready = ap_const_logic_1)) then 
                    grp_generic_tanh_double_s_fu_187_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i_0_i_reg_112 <= i_reg_291;
            elsif (((grp_calculateLayer4_fu_173_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i_reg_112 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_0_i_reg_146 <= j_reg_309;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_i_reg_146 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                phi_mul_reg_124 <= add_ln57_reg_283;
            elsif (((grp_calculateLayer4_fu_173_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_124 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    somme_0_i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                somme_0_i_reg_136 <= grp_fu_204_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                somme_0_i_reg_136 <= Layer4_Weights_CPU_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Layer4_Neurons_CPU_l_reg_329 <= Layer4_Neurons_CPU_q0;
                Layer4_Weights_CPU_l_reg_324 <= Layer4_Weights_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln57_reg_283 <= add_ln57_fu_223_p2;
                i_reg_291 <= i_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_reg_309 <= j_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_217 <= grp_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_3_i_reg_334 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_generic_tanh_double_s_fu_187_ap_done = ap_const_logic_1))) then
                tmp_i_i_reg_349 <= grp_generic_tanh_double_s_fu_187_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_i_reg_344 <= grp_fu_213_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln57_fu_229_p2, ap_CS_fsm_state7, icmp_ln59_fu_246_p2, ap_CS_fsm_state26, grp_generic_tanh_double_s_fu_187_ap_done, grp_calculateLayer3_fu_157_ap_done, grp_calculateLayer4_fu_173_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_calculateLayer3_fu_157_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_calculateLayer4_fu_173_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln57_fu_229_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln59_fu_246_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_generic_tanh_double_s_fu_187_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Layer2_Neurons_CPU_address0 <= grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_address0;
    Layer2_Neurons_CPU_address1 <= grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_address1;
    Layer2_Neurons_CPU_ce0 <= grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_ce0;
    Layer2_Neurons_CPU_ce1 <= grp_calculateLayer3_fu_157_Layer2_Neurons_CPU_ce1;

    Layer3_Neurons_CPU_address0_assign_proc : process(grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_address0, grp_calculateLayer4_fu_173_Layer3_Neurons_CPU_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Layer3_Neurons_CPU_address0 <= grp_calculateLayer4_fu_173_Layer3_Neurons_CPU_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Layer3_Neurons_CPU_address0 <= grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_address0;
        else 
            Layer3_Neurons_CPU_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Layer3_Neurons_CPU_ce0_assign_proc : process(grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_ce0, grp_calculateLayer4_fu_173_Layer3_Neurons_CPU_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Layer3_Neurons_CPU_ce0 <= grp_calculateLayer4_fu_173_Layer3_Neurons_CPU_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Layer3_Neurons_CPU_ce0 <= grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_ce0;
        else 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer3_Neurons_CPU_we0_assign_proc : process(grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Layer3_Neurons_CPU_we0 <= grp_calculateLayer3_fu_157_Layer3_Neurons_CPU_we0;
        else 
            Layer3_Neurons_CPU_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer4_Neurons_CPU_address0_assign_proc : process(ap_CS_fsm_state7, grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_address0, ap_CS_fsm_state4, zext_ln60_1_fu_273_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Layer4_Neurons_CPU_address0 <= zext_ln60_1_fu_273_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Layer4_Neurons_CPU_address0 <= grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_address0;
        else 
            Layer4_Neurons_CPU_address0 <= "XXXXXXX";
        end if; 
    end process;


    Layer4_Neurons_CPU_ce0_assign_proc : process(ap_CS_fsm_state7, grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Layer4_Neurons_CPU_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Layer4_Neurons_CPU_ce0 <= grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_ce0;
        else 
            Layer4_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer4_Neurons_CPU_we0_assign_proc : process(grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Layer4_Neurons_CPU_we0 <= grp_calculateLayer4_fu_173_Layer4_Neurons_CPU_we0;
        else 
            Layer4_Neurons_CPU_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer4_Weights_CPU_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, zext_ln58_fu_241_p1, zext_ln60_fu_268_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Layer4_Weights_CPU_address0 <= zext_ln60_fu_268_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer4_Weights_CPU_address0 <= zext_ln58_fu_241_p1(10 - 1 downto 0);
        else 
            Layer4_Weights_CPU_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Layer4_Weights_CPU_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            Layer4_Weights_CPU_ce0 <= ap_const_logic_1;
        else 
            Layer4_Weights_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Layer5_Neurons_CPU_address0 <= zext_ln61_fu_278_p1(4 - 1 downto 0);

    Layer5_Neurons_CPU_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Layer5_Neurons_CPU_ce0 <= ap_const_logic_1;
        else 
            Layer5_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Layer5_Neurons_CPU_d0 <= reg_217;

    Layer5_Neurons_CPU_we0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Layer5_Neurons_CPU_we0 <= ap_const_logic_1;
        else 
            Layer5_Neurons_CPU_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln57_fu_223_p2 <= std_logic_vector(unsigned(phi_mul_reg_124) + unsigned(ap_const_lv10_65));
    add_ln60_1_fu_262_p2 <= std_logic_vector(unsigned(zext_ln60_2_fu_258_p1) + unsigned(phi_mul_reg_124));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state5, icmp_ln57_fu_229_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln57_fu_229_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln57_fu_229_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln57_fu_229_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_calculateLayer3_fu_157_ap_start <= grp_calculateLayer3_fu_157_ap_start_reg;
    grp_calculateLayer4_fu_173_ap_start <= grp_calculateLayer4_fu_173_ap_start_reg;

    grp_fu_198_p0_assign_proc : process(tmp_i_reg_344, tmp_i_i_reg_349, ap_CS_fsm_state19, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_198_p0 <= tmp_i_i_reg_349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_198_p0 <= tmp_i_reg_344;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_198_p1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_198_p1 <= ap_const_lv64_3FFB74538EF34D6A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_198_p1 <= ap_const_lv64_3FE55555571F7693;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_tanh_double_s_fu_187_ap_start <= grp_generic_tanh_double_s_fu_187_ap_start_reg;
    i_fu_235_p2 <= std_logic_vector(unsigned(i_0_i_reg_112) + unsigned(ap_const_lv4_1));
    icmp_ln57_fu_229_p2 <= "1" when (i_0_i_reg_112 = ap_const_lv4_A) else "0";
    icmp_ln59_fu_246_p2 <= "1" when (j_0_i_reg_146 = ap_const_lv7_64) else "0";
    j_fu_252_p2 <= std_logic_vector(unsigned(j_0_i_reg_146) + unsigned(ap_const_lv7_1));
    zext_ln58_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_124),64));
    zext_ln60_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_146),64));
    zext_ln60_2_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_252_p2),10));
    zext_ln60_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_1_fu_262_p2),64));
    zext_ln61_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_112),64));
end behav;
