// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calculateLayer3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Layer2_Neurons_CPU_address0,
        Layer2_Neurons_CPU_ce0,
        Layer2_Neurons_CPU_q0,
        Layer2_Neurons_CPU_address1,
        Layer2_Neurons_CPU_ce1,
        Layer2_Neurons_CPU_q1,
        Layer3_Neurons_CPU_address0,
        Layer3_Neurons_CPU_ce0,
        Layer3_Neurons_CPU_we0,
        Layer3_Neurons_CPU_d0
);

parameter    ap_ST_fsm_state1 = 60'd1;
parameter    ap_ST_fsm_state2 = 60'd2;
parameter    ap_ST_fsm_state3 = 60'd4;
parameter    ap_ST_fsm_state4 = 60'd8;
parameter    ap_ST_fsm_state5 = 60'd16;
parameter    ap_ST_fsm_state6 = 60'd32;
parameter    ap_ST_fsm_state7 = 60'd64;
parameter    ap_ST_fsm_state8 = 60'd128;
parameter    ap_ST_fsm_state9 = 60'd256;
parameter    ap_ST_fsm_state10 = 60'd512;
parameter    ap_ST_fsm_state11 = 60'd1024;
parameter    ap_ST_fsm_state12 = 60'd2048;
parameter    ap_ST_fsm_state13 = 60'd4096;
parameter    ap_ST_fsm_state14 = 60'd8192;
parameter    ap_ST_fsm_state15 = 60'd16384;
parameter    ap_ST_fsm_state16 = 60'd32768;
parameter    ap_ST_fsm_state17 = 60'd65536;
parameter    ap_ST_fsm_state18 = 60'd131072;
parameter    ap_ST_fsm_state19 = 60'd262144;
parameter    ap_ST_fsm_state20 = 60'd524288;
parameter    ap_ST_fsm_state21 = 60'd1048576;
parameter    ap_ST_fsm_state22 = 60'd2097152;
parameter    ap_ST_fsm_state23 = 60'd4194304;
parameter    ap_ST_fsm_state24 = 60'd8388608;
parameter    ap_ST_fsm_state25 = 60'd16777216;
parameter    ap_ST_fsm_state26 = 60'd33554432;
parameter    ap_ST_fsm_state27 = 60'd67108864;
parameter    ap_ST_fsm_state28 = 60'd134217728;
parameter    ap_ST_fsm_state29 = 60'd268435456;
parameter    ap_ST_fsm_state30 = 60'd536870912;
parameter    ap_ST_fsm_state31 = 60'd1073741824;
parameter    ap_ST_fsm_state32 = 60'd2147483648;
parameter    ap_ST_fsm_state33 = 60'd4294967296;
parameter    ap_ST_fsm_state34 = 60'd8589934592;
parameter    ap_ST_fsm_state35 = 60'd17179869184;
parameter    ap_ST_fsm_state36 = 60'd34359738368;
parameter    ap_ST_fsm_state37 = 60'd68719476736;
parameter    ap_ST_fsm_state38 = 60'd137438953472;
parameter    ap_ST_fsm_state39 = 60'd274877906944;
parameter    ap_ST_fsm_state40 = 60'd549755813888;
parameter    ap_ST_fsm_state41 = 60'd1099511627776;
parameter    ap_ST_fsm_state42 = 60'd2199023255552;
parameter    ap_ST_fsm_state43 = 60'd4398046511104;
parameter    ap_ST_fsm_state44 = 60'd8796093022208;
parameter    ap_ST_fsm_state45 = 60'd17592186044416;
parameter    ap_ST_fsm_state46 = 60'd35184372088832;
parameter    ap_ST_fsm_state47 = 60'd70368744177664;
parameter    ap_ST_fsm_state48 = 60'd140737488355328;
parameter    ap_ST_fsm_state49 = 60'd281474976710656;
parameter    ap_ST_fsm_state50 = 60'd562949953421312;
parameter    ap_ST_fsm_state51 = 60'd1125899906842624;
parameter    ap_ST_fsm_state52 = 60'd2251799813685248;
parameter    ap_ST_fsm_state53 = 60'd4503599627370496;
parameter    ap_ST_fsm_state54 = 60'd9007199254740992;
parameter    ap_ST_fsm_state55 = 60'd18014398509481984;
parameter    ap_ST_fsm_state56 = 60'd36028797018963968;
parameter    ap_ST_fsm_state57 = 60'd72057594037927936;
parameter    ap_ST_fsm_state58 = 60'd144115188075855872;
parameter    ap_ST_fsm_state59 = 60'd288230376151711744;
parameter    ap_ST_fsm_state60 = 60'd576460752303423488;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] Layer2_Neurons_CPU_address0;
output   Layer2_Neurons_CPU_ce0;
input  [31:0] Layer2_Neurons_CPU_q0;
output  [9:0] Layer2_Neurons_CPU_address1;
output   Layer2_Neurons_CPU_ce1;
input  [31:0] Layer2_Neurons_CPU_q1;
output  [10:0] Layer3_Neurons_CPU_address0;
output   Layer3_Neurons_CPU_ce0;
output   Layer3_Neurons_CPU_we0;
output  [31:0] Layer3_Neurons_CPU_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] Layer2_Neurons_CPU_address0;
reg Layer2_Neurons_CPU_ce0;
reg[9:0] Layer2_Neurons_CPU_address1;
reg Layer2_Neurons_CPU_ce1;
reg Layer3_Neurons_CPU_ce0;
reg Layer3_Neurons_CPU_we0;

(* fsm_encoding = "none" *) reg   [59:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] Layer2_Weights_CPU_address0;
reg    Layer2_Weights_CPU_ce0;
wire   [31:0] Layer2_Weights_CPU_q0;
wire   [12:0] Layer2_Weights_CPU_address1;
reg    Layer2_Weights_CPU_ce1;
wire   [31:0] Layer2_Weights_CPU_q1;
reg   [31:0] reg_356;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
reg   [31:0] reg_361;
wire   [31:0] grp_fu_334_p2;
reg   [31:0] reg_367;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
wire   [31:0] grp_fu_329_p2;
reg   [31:0] reg_372;
wire    ap_CS_fsm_state18;
wire   [63:0] grp_fu_350_p2;
reg   [63:0] reg_377;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state58;
wire   [10:0] add_ln35_3_fu_383_p2;
reg   [10:0] add_ln35_3_reg_865;
wire    ap_CS_fsm_state2;
wire   [12:0] add_ln35_4_fu_389_p2;
reg   [12:0] add_ln35_4_reg_870;
wire   [5:0] i_fu_401_p2;
reg   [5:0] i_reg_878;
wire   [0:0] icmp_ln20_fu_395_p2;
wire   [31:0] zext_ln28_2_fu_418_p1;
reg   [31:0] zext_ln28_2_reg_888;
wire    ap_CS_fsm_state3;
wire   [14:0] zext_ln28_3_fu_422_p1;
reg   [14:0] zext_ln28_3_reg_893;
wire   [14:0] zext_ln30_2_fu_432_p1;
reg   [14:0] zext_ln30_2_reg_901;
reg   [31:0] somme_reg_906;
wire   [2:0] j_fu_446_p2;
reg   [2:0] j_reg_914;
wire    ap_CS_fsm_state4;
wire   [3:0] shl_ln28_1_fu_452_p3;
reg   [3:0] shl_ln28_1_reg_919;
wire   [0:0] icmp_ln21_fu_440_p2;
wire   [10:0] zext_ln35_1_fu_474_p1;
reg   [10:0] zext_ln35_1_reg_924;
wire   [10:0] zext_ln22_fu_478_p1;
reg   [10:0] zext_ln22_reg_929;
wire    ap_CS_fsm_state5;
wire   [2:0] k_fu_488_p2;
reg   [2:0] k_reg_937;
wire   [7:0] zext_ln28_4_fu_502_p1;
reg   [7:0] zext_ln28_4_reg_942;
wire   [0:0] icmp_ln22_fu_482_p2;
wire   [3:0] zext_ln25_fu_506_p1;
reg   [3:0] zext_ln25_reg_948;
wire    ap_CS_fsm_state6;
wire   [2:0] m_fu_516_p2;
reg   [2:0] m_reg_956;
wire   [4:0] shl_ln28_2_fu_522_p3;
reg   [4:0] shl_ln28_2_reg_961;
wire   [0:0] icmp_ln25_fu_510_p2;
wire   [7:0] mul_ln28_fu_539_p2;
reg   [7:0] mul_ln28_reg_966;
wire   [8:0] zext_ln29_2_fu_550_p1;
reg   [8:0] zext_ln29_2_reg_971;
wire   [9:0] zext_ln31_2_fu_554_p1;
reg   [9:0] zext_ln31_2_reg_978;
wire   [10:0] add_ln35_1_fu_563_p2;
reg   [10:0] add_ln35_1_reg_984;
wire   [8:0] zext_ln26_1_fu_572_p1;
reg   [8:0] zext_ln26_1_reg_989;
wire    ap_CS_fsm_state7;
wire   [7:0] zext_ln26_3_fu_580_p1;
reg   [7:0] zext_ln26_3_reg_995;
wire   [2:0] n_fu_590_p2;
reg   [2:0] n_reg_1003;
wire   [4:0] add_ln28_1_fu_605_p2;
reg   [4:0] add_ln28_1_reg_1008;
wire   [0:0] icmp_ln26_fu_584_p2;
wire   [7:0] add_ln28_4_fu_615_p2;
reg   [7:0] add_ln28_4_reg_1014;
wire   [9:0] add_ln31_3_fu_634_p2;
reg   [9:0] add_ln31_3_reg_1019;
wire   [9:0] add_ln32_3_fu_645_p2;
reg   [9:0] add_ln32_3_reg_1024;
wire  signed [8:0] sub_ln28_fu_672_p2;
reg  signed [8:0] sub_ln28_reg_1029;
wire    ap_CS_fsm_state8;
wire   [14:0] add_ln30_fu_739_p2;
reg   [14:0] add_ln30_reg_1056;
reg   [31:0] Layer2_Weights_CPU_l_1_reg_1061;
reg   [31:0] Layer2_Neurons_CPU_l_1_reg_1066;
wire   [31:0] grp_fu_338_p2;
reg   [31:0] tmp_2_reg_1071;
wire   [8:0] add_ln33_3_fu_772_p2;
reg   [8:0] add_ln33_3_reg_1086;
wire   [14:0] add_ln33_1_fu_840_p2;
reg   [14:0] add_ln33_1_reg_1111;
wire    ap_CS_fsm_state43;
wire   [63:0] grp_fu_346_p1;
reg   [63:0] tmp_reg_1131;
wire    ap_CS_fsm_state44;
wire   [63:0] grp_generic_tanh_double_s_fu_318_ap_return;
reg   [63:0] tmp_i_reg_1136;
wire    ap_CS_fsm_state52;
wire    grp_generic_tanh_double_s_fu_318_ap_ready;
wire    grp_generic_tanh_double_s_fu_318_ap_done;
wire    grp_generic_tanh_double_s_fu_318_ap_start;
wire    grp_generic_tanh_double_s_fu_318_ap_idle;
reg   [5:0] i_0_reg_217;
reg   [12:0] phi_mul_reg_228;
reg   [10:0] phi_mul1_reg_240;
reg   [2:0] j_0_reg_252;
reg   [2:0] k_0_reg_263;
wire    ap_CS_fsm_state60;
reg   [31:0] somme_0_reg_274;
reg   [2:0] m_0_reg_284;
reg   [31:0] somme_1_reg_295;
reg   [2:0] n_0_reg_307;
reg    grp_generic_tanh_double_s_fu_318_ap_start_reg;
wire    ap_CS_fsm_state51;
wire   [63:0] zext_ln23_fu_407_p1;
wire   [63:0] zext_ln28_fu_695_p1;
wire   [63:0] zext_ln28_1_fu_700_p1;
wire   [63:0] zext_ln29_fu_715_p1;
wire   [63:0] zext_ln29_1_fu_734_p1;
wire   [63:0] zext_ln30_fu_747_p1;
wire   [63:0] zext_ln30_1_fu_762_p1;
wire   [63:0] zext_ln31_fu_795_p1;
wire   [63:0] zext_ln31_1_fu_800_p1;
wire   [63:0] zext_ln32_fu_822_p1;
wire   [63:0] zext_ln32_1_fu_827_p1;
wire   [63:0] zext_ln33_fu_848_p1;
wire   [63:0] zext_ln33_1_fu_856_p1;
wire   [63:0] zext_ln35_fu_861_p1;
wire   [31:0] grp_fu_342_p1;
reg   [31:0] grp_fu_329_p0;
reg   [31:0] grp_fu_329_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state59;
reg   [63:0] grp_fu_350_p0;
reg   [63:0] grp_fu_350_p1;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state53;
wire   [12:0] or_ln28_fu_412_p2;
wire   [12:0] or_ln30_fu_426_p2;
wire   [4:0] zext_ln21_fu_436_p1;
wire   [4:0] shl_ln_fu_460_p3;
wire   [4:0] add_ln35_fu_468_p2;
wire   [3:0] shl_ln1_fu_494_p3;
wire   [3:0] add_ln28_fu_530_p2;
wire   [3:0] mul_ln28_fu_539_p0;
wire   [7:0] add_ln29_1_fu_545_p2;
wire   [10:0] add_ln35_2_fu_558_p2;
wire   [3:0] zext_ln26_2_fu_576_p1;
wire   [3:0] add_ln28_3_fu_596_p2;
wire   [4:0] zext_ln28_6_fu_601_p1;
wire   [7:0] add_ln28_5_fu_610_p2;
wire   [3:0] add_ln31_2_fu_620_p2;
wire  signed [8:0] sext_ln31_2_fu_626_p1;
wire   [9:0] zext_ln31_3_fu_630_p1;
wire   [9:0] zext_ln26_fu_568_p1;
wire   [9:0] add_ln32_2_fu_639_p2;
wire   [7:0] shl_ln28_3_fu_650_p3;
wire   [5:0] shl_ln28_4_fu_661_p3;
wire   [8:0] zext_ln28_7_fu_657_p1;
wire   [8:0] zext_ln28_8_fu_668_p1;
wire  signed [14:0] sext_ln28_1_fu_682_p1;
wire   [14:0] add_ln28_2_fu_686_p2;
wire  signed [31:0] sext_ln28_2_fu_691_p1;
wire  signed [31:0] sext_ln28_fu_678_p1;
wire   [31:0] or_ln29_fu_704_p2;
wire   [31:0] add_ln29_fu_710_p2;
wire   [7:0] add_ln29_2_fu_720_p2;
wire   [8:0] zext_ln29_3_fu_725_p1;
wire   [8:0] add_ln29_3_fu_729_p2;
wire  signed [31:0] sext_ln30_fu_744_p1;
wire   [8:0] add_ln30_1_fu_752_p2;
wire   [8:0] add_ln30_2_fu_757_p2;
wire   [8:0] add_ln33_2_fu_767_p2;
wire   [8:0] add_ln31_fu_777_p2;
wire  signed [14:0] sext_ln31_fu_782_p1;
wire   [14:0] add_ln31_1_fu_786_p2;
wire  signed [31:0] sext_ln31_1_fu_791_p1;
wire   [8:0] add_ln32_fu_804_p2;
wire  signed [14:0] sext_ln32_fu_809_p1;
wire   [14:0] add_ln32_1_fu_813_p2;
wire  signed [31:0] sext_ln32_1_fu_818_p1;
wire   [8:0] add_ln33_fu_831_p2;
wire  signed [14:0] sext_ln33_fu_836_p1;
wire  signed [31:0] sext_ln33_1_fu_845_p1;
wire  signed [9:0] sext_ln33_2_fu_853_p1;
reg   [59:0] ap_NS_fsm;
wire   [7:0] mul_ln28_fu_539_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 60'd1;
#0 grp_generic_tanh_double_s_fu_318_ap_start_reg = 1'b0;
end

calculateLayer3_Layer2_Weights_CPU #(
    .DataWidth( 32 ),
    .AddressRange( 7800 ),
    .AddressWidth( 13 ))
Layer2_Weights_CPU_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Layer2_Weights_CPU_address0),
    .ce0(Layer2_Weights_CPU_ce0),
    .q0(Layer2_Weights_CPU_q0),
    .address1(Layer2_Weights_CPU_address1),
    .ce1(Layer2_Weights_CPU_ce1),
    .q1(Layer2_Weights_CPU_q1)
);

generic_tanh_double_s grp_generic_tanh_double_s_fu_318(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_generic_tanh_double_s_fu_318_ap_start),
    .ap_done(grp_generic_tanh_double_s_fu_318_ap_done),
    .ap_idle(grp_generic_tanh_double_s_fu_318_ap_idle),
    .ap_ready(grp_generic_tanh_double_s_fu_318_ap_ready),
    .t_in(reg_377),
    .ap_return(grp_generic_tanh_double_s_fu_318_ap_return)
);

nerons_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nerons_fadd_32ns_32ns_32_5_full_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_329_p0),
    .din1(grp_fu_329_p1),
    .ce(1'b1),
    .dout(grp_fu_329_p2)
);

nerons_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nerons_fmul_32ns_32ns_32_4_max_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_356),
    .din1(reg_361),
    .ce(1'b1),
    .dout(grp_fu_334_p2)
);

nerons_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
nerons_fmul_32ns_32ns_32_4_max_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Layer2_Weights_CPU_l_1_reg_1061),
    .din1(Layer2_Neurons_CPU_l_1_reg_1066),
    .ce(1'b1),
    .dout(grp_fu_338_p2)
);

nerons_fptrunc_64ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
nerons_fptrunc_64ns_32_2_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_377),
    .ce(1'b1),
    .dout(grp_fu_342_p1)
);

nerons_fpext_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
nerons_fpext_32ns_64_2_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(somme_0_reg_274),
    .ce(1'b1),
    .dout(grp_fu_346_p1)
);

nerons_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
nerons_dmul_64ns_64ns_64_6_max_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_350_p0),
    .din1(grp_fu_350_p1),
    .ce(1'b1),
    .dout(grp_fu_350_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_generic_tanh_double_s_fu_318_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state51)) begin
            grp_generic_tanh_double_s_fu_318_ap_start_reg <= 1'b1;
        end else if ((grp_generic_tanh_double_s_fu_318_ap_ready == 1'b1)) begin
            grp_generic_tanh_double_s_fu_318_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_217 <= i_reg_878;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_217 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_252 <= j_reg_914;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_252 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_reg_263 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        k_0_reg_263 <= k_reg_937;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_584_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        m_0_reg_284 <= m_reg_956;
    end else if (((icmp_ln22_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        m_0_reg_284 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        n_0_reg_307 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        n_0_reg_307 <= n_reg_1003;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_240 <= add_ln35_3_reg_865;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul1_reg_240 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_228 <= add_ln35_4_reg_870;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_228 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_361 <= Layer2_Neurons_CPU_q1;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_361 <= Layer2_Neurons_CPU_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_584_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        somme_0_reg_274 <= somme_1_reg_295;
    end else if (((icmp_ln22_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        somme_0_reg_274 <= somme_reg_906;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        somme_1_reg_295 <= somme_0_reg_274;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        somme_1_reg_295 <= grp_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Layer2_Neurons_CPU_l_1_reg_1066 <= Layer2_Neurons_CPU_q1;
        Layer2_Weights_CPU_l_1_reg_1061 <= Layer2_Weights_CPU_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_584_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln28_1_reg_1008 <= add_ln28_1_fu_605_p2;
        add_ln28_4_reg_1014 <= add_ln28_4_fu_615_p2;
        add_ln31_3_reg_1019 <= add_ln31_3_fu_634_p2;
        add_ln32_3_reg_1024 <= add_ln32_3_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln30_reg_1056[14 : 1] <= add_ln30_fu_739_p2[14 : 1];
        sub_ln28_reg_1029[8 : 1] <= sub_ln28_fu_672_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln33_1_reg_1111[14 : 1] <= add_ln33_1_fu_840_p2[14 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln33_3_reg_1086 <= add_ln33_3_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln35_1_reg_984 <= add_ln35_1_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln35_3_reg_865 <= add_ln35_3_fu_383_p2;
        add_ln35_4_reg_870 <= add_ln35_4_fu_389_p2;
        i_reg_878 <= i_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_914 <= j_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_937 <= k_fu_488_p2;
        zext_ln22_reg_929[2 : 0] <= zext_ln22_fu_478_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_reg_956 <= m_fu_516_p2;
        zext_ln25_reg_948[2 : 0] <= zext_ln25_fu_506_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        mul_ln28_reg_966 <= mul_ln28_fu_539_p2;
        shl_ln28_2_reg_961[4 : 2] <= shl_ln28_2_fu_522_p3[4 : 2];
        zext_ln29_2_reg_971[7 : 0] <= zext_ln29_2_fu_550_p1[7 : 0];
        zext_ln31_2_reg_978[7 : 0] <= zext_ln31_2_fu_554_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n_reg_1003 <= n_fu_590_p2;
        zext_ln26_1_reg_989[2 : 0] <= zext_ln26_1_fu_572_p1[2 : 0];
        zext_ln26_3_reg_995[2 : 0] <= zext_ln26_3_fu_580_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_356 <= Layer2_Weights_CPU_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_367 <= grp_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_372 <= grp_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state50))) begin
        reg_377 <= grp_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln28_1_reg_919[3 : 1] <= shl_ln28_1_fu_452_p3[3 : 1];
        zext_ln35_1_reg_924[4 : 0] <= zext_ln35_1_fu_474_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        somme_reg_906 <= Layer2_Weights_CPU_q0;
        zext_ln28_2_reg_888[12 : 1] <= zext_ln28_2_fu_418_p1[12 : 1];
        zext_ln28_3_reg_893[12 : 1] <= zext_ln28_3_fu_422_p1[12 : 1];
        zext_ln30_2_reg_901[12 : 2] <= zext_ln30_2_fu_432_p1[12 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_2_reg_1071 <= grp_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_generic_tanh_double_s_fu_318_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
        tmp_i_reg_1136 <= grp_generic_tanh_double_s_fu_318_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_reg_1131 <= grp_fu_346_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_482_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln28_4_reg_942[3 : 1] <= zext_ln28_4_fu_502_p1[3 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        Layer2_Neurons_CPU_address0 = zext_ln32_1_fu_827_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        Layer2_Neurons_CPU_address0 = zext_ln30_1_fu_762_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        Layer2_Neurons_CPU_address0 = zext_ln28_1_fu_700_p1;
    end else begin
        Layer2_Neurons_CPU_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Layer2_Neurons_CPU_address1 = zext_ln33_1_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        Layer2_Neurons_CPU_address1 = zext_ln31_1_fu_800_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        Layer2_Neurons_CPU_address1 = zext_ln29_1_fu_734_p1;
    end else begin
        Layer2_Neurons_CPU_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state28))) begin
        Layer2_Neurons_CPU_ce0 = 1'b1;
    end else begin
        Layer2_Neurons_CPU_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state23))) begin
        Layer2_Neurons_CPU_ce1 = 1'b1;
    end else begin
        Layer2_Neurons_CPU_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Layer2_Weights_CPU_address0 = zext_ln33_fu_848_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        Layer2_Weights_CPU_address0 = zext_ln32_fu_822_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        Layer2_Weights_CPU_address0 = zext_ln31_fu_795_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        Layer2_Weights_CPU_address0 = zext_ln30_fu_747_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        Layer2_Weights_CPU_address0 = zext_ln28_fu_695_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Layer2_Weights_CPU_address0 = zext_ln23_fu_407_p1;
    end else begin
        Layer2_Weights_CPU_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23))) begin
        Layer2_Weights_CPU_ce0 = 1'b1;
    end else begin
        Layer2_Weights_CPU_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        Layer2_Weights_CPU_ce1 = 1'b1;
    end else begin
        Layer2_Weights_CPU_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        Layer3_Neurons_CPU_ce0 = 1'b1;
    end else begin
        Layer3_Neurons_CPU_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        Layer3_Neurons_CPU_we0 = 1'b1;
    end else begin
        Layer3_Neurons_CPU_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln20_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state19))) begin
        grp_fu_329_p0 = reg_372;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_329_p0 = somme_1_reg_295;
    end else begin
        grp_fu_329_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_329_p1 = tmp_2_reg_1071;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_329_p1 = reg_367;
    end else begin
        grp_fu_329_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_350_p0 = tmp_i_reg_1136;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_350_p0 = tmp_reg_1131;
    end else begin
        grp_fu_350_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_350_p1 = 64'd4610406545773251946;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_350_p1 = 64'd4604180019078461075;
    end else begin
        grp_fu_350_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln20_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln21_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln22_fu_482_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln25_fu_510_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln26_fu_584_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((grp_generic_tanh_double_s_fu_318_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Layer2_Weights_CPU_address1 = zext_ln29_fu_715_p1;

assign Layer3_Neurons_CPU_address0 = zext_ln35_fu_861_p1;

assign Layer3_Neurons_CPU_d0 = grp_fu_342_p1;

assign add_ln28_1_fu_605_p2 = (shl_ln28_2_reg_961 + zext_ln28_6_fu_601_p1);

assign add_ln28_2_fu_686_p2 = ($signed(sext_ln28_1_fu_682_p1) + $signed(zext_ln28_3_reg_893));

assign add_ln28_3_fu_596_p2 = (zext_ln26_2_fu_576_p1 + zext_ln25_reg_948);

assign add_ln28_4_fu_615_p2 = (zext_ln28_4_reg_942 + add_ln28_5_fu_610_p2);

assign add_ln28_5_fu_610_p2 = (zext_ln26_3_fu_580_p1 + mul_ln28_reg_966);

assign add_ln28_fu_530_p2 = (zext_ln25_fu_506_p1 + shl_ln28_1_reg_919);

assign add_ln29_1_fu_545_p2 = (mul_ln28_fu_539_p2 + zext_ln28_4_reg_942);

assign add_ln29_2_fu_720_p2 = ($signed(zext_ln26_3_reg_995) + $signed(8'd169));

assign add_ln29_3_fu_729_p2 = (zext_ln29_2_reg_971 + zext_ln29_3_fu_725_p1);

assign add_ln29_fu_710_p2 = (zext_ln28_2_reg_888 + or_ln29_fu_704_p2);

assign add_ln30_1_fu_752_p2 = ($signed(zext_ln26_1_reg_989) + $signed(9'd338));

assign add_ln30_2_fu_757_p2 = (zext_ln29_2_reg_971 + add_ln30_1_fu_752_p2);

assign add_ln30_fu_739_p2 = ($signed(sext_ln28_1_fu_682_p1) + $signed(zext_ln30_2_reg_901));

assign add_ln31_1_fu_786_p2 = ($signed(zext_ln28_3_reg_893) + $signed(sext_ln31_fu_782_p1));

assign add_ln31_2_fu_620_p2 = ($signed(zext_ln26_2_fu_576_p1) + $signed(4'd11));

assign add_ln31_3_fu_634_p2 = (zext_ln31_2_reg_978 + zext_ln31_3_fu_630_p1);

assign add_ln31_fu_777_p2 = ($signed(sub_ln28_reg_1029) + $signed(9'd3));

assign add_ln32_1_fu_813_p2 = ($signed(zext_ln28_3_reg_893) + $signed(sext_ln32_fu_809_p1));

assign add_ln32_2_fu_639_p2 = ($signed(zext_ln26_fu_568_p1) + $signed(10'd676));

assign add_ln32_3_fu_645_p2 = (zext_ln31_2_reg_978 + add_ln32_2_fu_639_p2);

assign add_ln32_fu_804_p2 = ($signed(sub_ln28_reg_1029) + $signed(9'd4));

assign add_ln33_1_fu_840_p2 = ($signed(zext_ln28_3_reg_893) + $signed(sext_ln33_fu_836_p1));

assign add_ln33_2_fu_767_p2 = ($signed(zext_ln26_1_reg_989) + $signed(9'd333));

assign add_ln33_3_fu_772_p2 = (zext_ln29_2_reg_971 + add_ln33_2_fu_767_p2);

assign add_ln33_fu_831_p2 = ($signed(sub_ln28_reg_1029) + $signed(9'd5));

assign add_ln35_1_fu_563_p2 = (add_ln35_2_fu_558_p2 + zext_ln35_1_reg_924);

assign add_ln35_2_fu_558_p2 = (phi_mul1_reg_240 + zext_ln22_reg_929);

assign add_ln35_3_fu_383_p2 = (phi_mul1_reg_240 + 11'd25);

assign add_ln35_4_fu_389_p2 = (phi_mul_reg_228 + 13'd156);

assign add_ln35_fu_468_p2 = (zext_ln21_fu_436_p1 + shl_ln_fu_460_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_generic_tanh_double_s_fu_318_ap_start = grp_generic_tanh_double_s_fu_318_ap_start_reg;

assign i_fu_401_p2 = (i_0_reg_217 + 6'd1);

assign icmp_ln20_fu_395_p2 = ((i_0_reg_217 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_440_p2 = ((j_0_reg_252 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_482_p2 = ((k_0_reg_263 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_510_p2 = ((m_0_reg_284 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_584_p2 = ((n_0_reg_307 == 3'd5) ? 1'b1 : 1'b0);

assign j_fu_446_p2 = (j_0_reg_252 + 3'd1);

assign k_fu_488_p2 = (k_0_reg_263 + 3'd1);

assign m_fu_516_p2 = (m_0_reg_284 + 3'd1);

assign mul_ln28_fu_539_p0 = mul_ln28_fu_539_p00;

assign mul_ln28_fu_539_p00 = add_ln28_fu_530_p2;

assign mul_ln28_fu_539_p2 = (mul_ln28_fu_539_p0 * $signed('hD));

assign n_fu_590_p2 = (n_0_reg_307 + 3'd1);

assign or_ln28_fu_412_p2 = (phi_mul_reg_228 | 13'd1);

assign or_ln29_fu_704_p2 = (sext_ln28_fu_678_p1 | 32'd1);

assign or_ln30_fu_426_p2 = (phi_mul_reg_228 | 13'd3);

assign sext_ln28_1_fu_682_p1 = sub_ln28_fu_672_p2;

assign sext_ln28_2_fu_691_p1 = $signed(add_ln28_2_fu_686_p2);

assign sext_ln28_fu_678_p1 = sub_ln28_fu_672_p2;

assign sext_ln30_fu_744_p1 = $signed(add_ln30_reg_1056);

assign sext_ln31_1_fu_791_p1 = $signed(add_ln31_1_fu_786_p2);

assign sext_ln31_2_fu_626_p1 = $signed(add_ln31_2_fu_620_p2);

assign sext_ln31_fu_782_p1 = $signed(add_ln31_fu_777_p2);

assign sext_ln32_1_fu_818_p1 = $signed(add_ln32_1_fu_813_p2);

assign sext_ln32_fu_809_p1 = $signed(add_ln32_fu_804_p2);

assign sext_ln33_1_fu_845_p1 = $signed(add_ln33_1_reg_1111);

assign sext_ln33_2_fu_853_p1 = $signed(add_ln33_3_reg_1086);

assign sext_ln33_fu_836_p1 = $signed(add_ln33_fu_831_p2);

assign shl_ln1_fu_494_p3 = {{k_0_reg_263}, {1'd0}};

assign shl_ln28_1_fu_452_p3 = {{j_0_reg_252}, {1'd0}};

assign shl_ln28_2_fu_522_p3 = {{m_0_reg_284}, {2'd0}};

assign shl_ln28_3_fu_650_p3 = {{add_ln28_1_reg_1008}, {3'd0}};

assign shl_ln28_4_fu_661_p3 = {{add_ln28_1_reg_1008}, {1'd0}};

assign shl_ln_fu_460_p3 = {{j_0_reg_252}, {2'd0}};

assign sub_ln28_fu_672_p2 = (zext_ln28_7_fu_657_p1 - zext_ln28_8_fu_668_p1);

assign zext_ln21_fu_436_p1 = j_0_reg_252;

assign zext_ln22_fu_478_p1 = k_0_reg_263;

assign zext_ln23_fu_407_p1 = phi_mul_reg_228;

assign zext_ln25_fu_506_p1 = m_0_reg_284;

assign zext_ln26_1_fu_572_p1 = n_0_reg_307;

assign zext_ln26_2_fu_576_p1 = n_0_reg_307;

assign zext_ln26_3_fu_580_p1 = n_0_reg_307;

assign zext_ln26_fu_568_p1 = n_0_reg_307;

assign zext_ln28_1_fu_700_p1 = add_ln28_4_reg_1014;

assign zext_ln28_2_fu_418_p1 = or_ln28_fu_412_p2;

assign zext_ln28_3_fu_422_p1 = or_ln28_fu_412_p2;

assign zext_ln28_4_fu_502_p1 = shl_ln1_fu_494_p3;

assign zext_ln28_6_fu_601_p1 = add_ln28_3_fu_596_p2;

assign zext_ln28_7_fu_657_p1 = shl_ln28_3_fu_650_p3;

assign zext_ln28_8_fu_668_p1 = shl_ln28_4_fu_661_p3;

assign zext_ln28_fu_695_p1 = $unsigned(sext_ln28_2_fu_691_p1);

assign zext_ln29_1_fu_734_p1 = add_ln29_3_fu_729_p2;

assign zext_ln29_2_fu_550_p1 = add_ln29_1_fu_545_p2;

assign zext_ln29_3_fu_725_p1 = add_ln29_2_fu_720_p2;

assign zext_ln29_fu_715_p1 = add_ln29_fu_710_p2;

assign zext_ln30_1_fu_762_p1 = add_ln30_2_fu_757_p2;

assign zext_ln30_2_fu_432_p1 = or_ln30_fu_426_p2;

assign zext_ln30_fu_747_p1 = $unsigned(sext_ln30_fu_744_p1);

assign zext_ln31_1_fu_800_p1 = add_ln31_3_reg_1019;

assign zext_ln31_2_fu_554_p1 = add_ln29_1_fu_545_p2;

assign zext_ln31_3_fu_630_p1 = $unsigned(sext_ln31_2_fu_626_p1);

assign zext_ln31_fu_795_p1 = $unsigned(sext_ln31_1_fu_791_p1);

assign zext_ln32_1_fu_827_p1 = add_ln32_3_reg_1024;

assign zext_ln32_fu_822_p1 = $unsigned(sext_ln32_1_fu_818_p1);

assign zext_ln33_1_fu_856_p1 = $unsigned(sext_ln33_2_fu_853_p1);

assign zext_ln33_fu_848_p1 = $unsigned(sext_ln33_1_fu_845_p1);

assign zext_ln35_1_fu_474_p1 = add_ln35_fu_468_p2;

assign zext_ln35_fu_861_p1 = add_ln35_1_reg_984;

always @ (posedge ap_clk) begin
    zext_ln28_2_reg_888[0] <= 1'b1;
    zext_ln28_2_reg_888[31:13] <= 19'b0000000000000000000;
    zext_ln28_3_reg_893[0] <= 1'b1;
    zext_ln28_3_reg_893[14:13] <= 2'b00;
    zext_ln30_2_reg_901[1:0] <= 2'b11;
    zext_ln30_2_reg_901[14:13] <= 2'b00;
    shl_ln28_1_reg_919[0] <= 1'b0;
    zext_ln35_1_reg_924[10:5] <= 6'b000000;
    zext_ln22_reg_929[10:3] <= 8'b00000000;
    zext_ln28_4_reg_942[0] <= 1'b0;
    zext_ln28_4_reg_942[7:4] <= 4'b0000;
    zext_ln25_reg_948[3] <= 1'b0;
    shl_ln28_2_reg_961[1:0] <= 2'b00;
    zext_ln29_2_reg_971[8] <= 1'b0;
    zext_ln31_2_reg_978[9:8] <= 2'b00;
    zext_ln26_1_reg_989[8:3] <= 6'b000000;
    zext_ln26_3_reg_995[7:3] <= 5'b00000;
    sub_ln28_reg_1029[0] <= 1'b0;
    add_ln30_reg_1056[0] <= 1'b1;
    add_ln33_1_reg_1111[0] <= 1'b0;
end

endmodule //calculateLayer3
