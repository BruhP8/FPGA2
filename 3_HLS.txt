Synthèse pour les layer 3 4 et 5

modifications :
    -> un header 345.h qui englobe :
        -> SIGMOID et DSIGMOID
        -> IMGWIDTH et IMGHEIGHT
        -> Les déclarations des Layers 2 et 5
        -> Les poids des layers 1, 2, 3 et 4

    -> un 345.c où on retrouve :
        -> les fonctions de calcul des layers 3 4 et 5
        -> une fonction top dans laquelle on déclare les layers 3 et 4, et appelle les fonctions 3 4 et 5

    -> le testBench
        -> inclus 345.h pour les poids, SIGMOIDs, WIDTH/HEIGHT
        -> déclarations de Layer 1
        -> définition de l'input choisi, traitement des résultats
        -> appels des fonctions de layers 1 et 2, puis de la top fonction

    En raison d'un comportement spécifique à HLS, il a été nécessaire de modifier le squelette de la fonction top 
    afin d'éviter une erreur "unsupported memory access on variable 'Layer2_Neurons_CPU' which is (or contains) an array with unknown size at compile time."
    Ainsi, pour la fonction top :
        void nerons (float* Layer2_Neurons_CPU, double* Layer5_Neurons_CPU){
    doit devenir :
        void nerons (float Layer2_Neurons_CPU[6*13*13], double Layer5_Neurons_CPU[10]){

--------------------------------------------------------------------------------------------------------------
    
Résultats de synthèse brute (sans pragmas et sans optimisation) :
    -> Timing trop juste pour 10ns : latence estimée à 9.514ns +/- 1.25ns -> dépassement possible

    ---------> amélrioration : piepeline et task-level piepeline, déroulage de boucles (?)

    -> Utilisation de ressources (trop) élevées :
        -> 115% de la bram disponible alouée (324)
        -> 71% des LUTs (38.177)
        -> 49% des blocs DSP (108)
        -> 26% des FF (28.399)

    ---------> amélioration : types de données plus économes, approximate computing, array optimisation
        #pragma HLS ARRAY_MAP horizontal -> effet inverse : passage a 206% de bram en combinant les poids 3 et 4

--------------------------------------------------------------------------------------------------------------

Une seconde sythèse est effectuée en utilisant le type Half au lieu de float. En effet, en consultant le détail de l'utilisation
des ressources dans le rapport de sythèse, on constate que ce sont les poids qui occupent le plus de mémoire. Il serait donc 
intéressant d'en diminuer l'emprumte. Ce type est fourni par la librairie hls_half.h. L'idée est de diminuer la précision des nombres
 utilisés afin d'économiser de la mémoire sans compromettre la performance. 
Le half est composé de 16 bits contre 32 pour les floats :
    - 1 bit de signe            (idem en float)
    - 5 bits d'exposant         (8 en float)
    - 10 bits de mantisse       (23 en float)
Un flottant 16 bits conserve une précision suffisament importante pour notre réseau tout en ayant le bénéfice d'utiliser
moitié moins d'espace comme on peut le constater en regardant les résultats post sythèse :

    -> timing inchangé (9.514ns +/- 1.25 avec dépassement de la contrainte possible)

    -> utilisation des ressources grandement améliorée, notament en BRAM :
        -> 68% de la bram alouée (193)    -> gain de 47% (résultat attendu : on divise par deux la taille des variables, on gagne 50% d'espace)
        -> 66% des luts          (35.468) -> gain de 5%
        -> 48 % des blocs DPS    (106)    -> gain de 1%
        -> 26% des FF            (27.687) -> léger gain

Attention, pour combattre un bug lors de la cosimulation, il faut exécuter la commande 
    export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu
dans le terminal avant de démarrer HLS, sinon des erreurs apparaiteront : cannot find crt1.o/ctri.o/lpthread/lm : No such file or directory
Voir : https://support.xilinx.com/s/article/69355?language=en_US

Constat post cosimulation : UN 2 est pris pour un 4 -> perte de perf si tout est passé en half. Solution : ne mettre que les poids en half ?
TODO
